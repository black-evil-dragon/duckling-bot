import datetime
from core.modules.schedule.templates.base import BaseTemplate

# * Default template
class DefaultTemplate(BaseTemplate):
    # üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã 4–ë09 –†–ü–°-31
    # | –ß—ë—Ç–Ω–∞—è | 01.10.2025 |

    # –°—Ä–µ–¥–∞
    # * üïí 09:40 - 11:10  
    # | üìö –û—Å–Ω–æ–≤—ã —Ç–µ–æ—Ä–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    # | üéØ –õ–µ–∫—Ü–∏—è
    # | üë®‚Äçüè´ –¥–æ—Ü., –°–µ—Ä–≥—É—à–∏—á–µ–≤–∞ –ê–Ω–Ω–∞ –ü–∞–≤–ª–æ–≤–Ω–∞
    # | üìç –∫. 4, –∞—É–¥. 2–∞

    # * üïí 11:40 - 13:10  
    # | üìö –û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
    # | üéØ –õ–µ–∫—Ü–∏—è
    # | üë®‚Äçüè´ —Å—Ç.–ø—Ä., –ö–æ–≤—ã—Ä–∑–∏–Ω–∞ –¢–∞—Ç—å—è–Ω–∞ –§–µ–¥–æ—Ä–æ–≤–Ω–∞
    # | üìç –∫. 2, –∞—É–¥. 227/3

    # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: 30.09.2025 15:54:20
    # –ü–æ–ª—É—á–µ–Ω–æ: 19:17:09.294201
    
    def get_message(self, data: dict, data_type: str = 'day', week_number: int = None) -> str:
        if data_type == 'day':
            return self.format_schedule_day(data)
        
        if data_type == 'weeks':
            return self.format_schedule_weeks(data, week_number)
        
              
           
    
    def format_schedule_day(self, data: dict) -> str:
        # Ininital data
        message = ""
        group = data.get('group', '')
        date = data.get('date', '')
        week_number = data.get('week_number', 0)
        week_day = data.get('week_day', '')
        lessons = data.get('lessons', [])
        
        # Prepare
        week_odd_even = "–ù–µ—á—ë—Ç–Ω–∞—è" if week_number % 2 != 0 else "–ß—ë—Ç–Ω–∞—è"
        weekday_name = self.get_weekday_name(week_day)

        # Create message
        message += (
            f"{self.header_component(group, week_odd_even, date)}"
            "\n\n"
            f"{weekday_name}"
            "\n"
        )

        if not lessons:
            message += "‚ùå –ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç\n\n"
        else:
            for lesson in lessons:
                message += (
                    f"{self.lesson_component(lesson)}"
                    "\n\n"
                )


        message += self.footer_component(data.get('last_update', ''))
        
        return message
    
    
    
    def format_schedule_weeks(self, data: dict, week_number: int = None) -> str:
        # Prepare data
        message = ""
        group: str = data.get('group', '')
        
        weeks: dict = data.get('data', {})
        if not weeks:
            return "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        
        if week_number is None:
            week_number = list(weeks.keys())[0]
        
        
        week: dict = weeks.get(week_number)
        if not week:
            return "–ù–µ–¥–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        week_odd_even = "–ù–µ—á—ë—Ç–Ω–∞—è" if week['is_odd'] else "–ß—ë—Ç–Ω–∞—è"


        # Create message
        message += (
            f"{self.header_component(
                group,
                week_odd_even,
                week.get('date_start'), week.get('date_end')
            )}"
            "\n\n"
        )
        
        
        # Weekdays
        for day_key in week.get('days', {}):
            # Weekday
            message += self.weekday_component(week.get('date_start'), int(day_key))

            # Lessons
            lessons = week['days'][day_key]
            if not lessons:
                message += "‚ùå –ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç\n\n"
                continue

            for lesson in lessons:
                message += (
                    f"{self.lesson_component(lesson)}"
                    "\n\n"
                )

        message += self.footer_component(data.get('last_update', ''))

        return message
    