from typing import Dict

import datetime



# * Base template
#  –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å —Å –º–µ—Ç–æ–¥–∞–º–∏ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
class BaseTemplate:    
    WEEKDAYS = {
        '1': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '2': '–í—Ç–æ—Ä–Ω–∏–∫', '3': '–°—Ä–µ–¥–∞',
        '4': '–ß–µ—Ç–≤–µ—Ä–≥', '5': '–ü—è—Ç–Ω–∏—Ü–∞', '6': '–°—É–±–±–æ—Ç–∞', '7': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    }
    
    
    def get_message(self, *args, **kwargs):
        raise NotImplementedError('–ú–µ—Ç–æ–¥ get_message –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –∫–ª–∞—Å—Å–µ-–Ω–∞—Å–ª–µ–¥–Ω–∏–∫–µ')

    
    # * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    def header_component(
        self,
        group_name: str,
        week_type: str,
        first_date: str,
        last_date: str = None
    ) -> str:
    
        first_date = datetime.datetime.strptime(first_date, "%Y-%m-%d").strftime("%d.%m.%Y")

        if last_date is not None:
            last_date = datetime.datetime.strptime(last_date, "%Y-%m-%d").strftime("%d.%m.%Y")

        date_info = f"{first_date} - {last_date}" if last_date else first_date
        

        
        return (
            f"<b>üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group_name}</b>"
            f"<b>| {week_type} | {date_info} |</b>"
        )
    
    
    def weekday_component(self, date_start: str, day_key: int = None):
        weekday = self.get_weekday_name(day_key)
        
        if day_key:
            weekday += f" ({self.get_date_by_weekday(date_start, int(day_key))})"

        return f"<b>{weekday}</b>"
    
    
    def lesson_component(self, lesson: Dict[str, str])  -> str:
        title = lesson.get('title', '')
        time = lesson.get('time', '')
        teacher = lesson.get('teacher', '')
        lesson_type = lesson.get('type', '')
        location = lesson.get('location', '')
        subgroup = lesson.get('subgroup', ' ') or ' '
        
        # –£–ø—Ä–æ—â–∞–µ–º –ª–æ–∫–∞—Ü–∏—é –¥–ª—è –¥–∏—Å—Ç–∞–Ω—Ç–∞
        if '–î–∏—Å—Ç–∞–Ω—Ç' in location:
            location = '–î–∏—Å—Ç–∞–Ω—Ç'
            
        return (
            f"* üïí <b>{time} {subgroup}</b>\n"
            f"| üìö {title}\n"
            f"| üéØ {lesson_type}\n"
            f"| üë®‚Äçüè´ {teacher}\n"
            f"| üìç {location}"
        )
    
    
    def footer_component(self, last_update: str) -> str:
        return (
            f"<i>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_update}\n</i>" if last_update else "\n"
            f"–ü–æ–ª—É—á–µ–Ω–æ: {datetime.datetime.now().time()}"
        )
    
    
    # * Utils
    def get_date_by_weekday(self, start_date: str, weekday: int) -> str:
        start = datetime.datetime.strptime(start_date, "%Y-%m-%d")
        target_date = start + datetime.timedelta(days=weekday-1)
        return target_date.strftime("%d.%m.%Y")

    def get_weekday_name(self, week_day: str) -> str:
        return self.WEEKDAYS.get(str(week_day), "EMPTY")

    def get_short_lesson_type(self, lesson_type: str) -> str:
        lesson_type = lesson_type.replace(' ', '').lower()
        short_lesson_types = {
            '–ª–µ–∫—Ü–∏—è': '–õ–ï–ö',
            '–ø—Ä–∞–∫—Ç–∏–∫–∞': '–ü–†–ê', 
            '–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è': '–õ–ê–ë',
            '—Å–µ–º–∏–Ω–∞—Ä': '–°–ï–ú',
            '—ç–∫–∑–∞–º–µ–Ω': '–≠–ö–ó',
            '–∑–∞—á–µ—Ç': '–ó–ê–ß',
            '–¥–∏—Ñ.–∑–∞—á–µ—Ç': '–î–ó–ê–ß',
            '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è': '–ö–û–ù–°',
        }
        return short_lesson_types.get(lesson_type, lesson_type)
    
    # ! DEPRECATED ----------------------------------
    def schedule_title(self, title: str) -> str:
        return f"<b>üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {title}</b>"
    
    def week_info(self, week_type: str, first_date: str, last_date: str = None) -> str:
        first_date = datetime.datetime.strptime(first_date, "%Y-%m-%d").strftime("%d.%m.%Y")

        if last_date is not None:
            last_date = datetime.datetime.strptime(last_date, "%Y-%m-%d").strftime("%d.%m.%Y")
            return f"<b>| {week_type} | {first_date} - {last_date} |</b>"
        
        return f"<b>| {week_type} | {first_date} |</b>"

