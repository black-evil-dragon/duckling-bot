from typing import Literal, overload
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

from core.data.weekdays import WEEKDAYS
from core.settings.commands import CommandNames
from core.modules.schedule.formatters import get_date_by_weekday
from utils.logger import get_logger

import datetime


log = get_logger()



# * KEYBOARDS ___________________________________________________________________
def create_pagination_keyboard(callback_data: str, current_page: int, total_pages: int, entity='—Å—Ç—Ä–∞–Ω–∏—Ü–∞') -> 'InlineKeyboardMarkup':
    """
    –£—Å—Ç–∞—Ä–µ–≤—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    log.warning('[func - create_pagination_keyboard]: This method is deprecated. Use use_paginator instead')

    keyboard = []

    if current_page > 0:
        keyboard.append(InlineKeyboardButton(f"‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è {entity}", callback_data=f"{callback_data}_{current_page-1}"))


    if current_page < total_pages - 1:
        keyboard.append(InlineKeyboardButton(f"–°–ª–µ–¥—É—é—â–∞—è {entity} ‚û°Ô∏è", callback_data=f"{callback_data}_{current_page+1}"))
    
    return InlineKeyboardMarkup([keyboard])



def use_paginator(callback_data: str, prev_key: str = None, next_key: str = None, entity='–°—Ç—Ä–∞–Ω–∏—Ü–∞', additional_buttons: list = None) -> 'InlineKeyboardMarkup':
    """
    –ë–æ–ª–µ–µ —É–ª—É—á—à–µ–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    keyboard = []

    if prev_key is not None:
        keyboard.append(InlineKeyboardButton(f"‚¨ÖÔ∏è {entity}", callback_data=f"{callback_data}#{prev_key}"))
    
    keyboard.append(InlineKeyboardButton("üìç –ú–µ–Ω—é", callback_data="delegate#menu"))

    if next_key is not None:
        keyboard.append(InlineKeyboardButton(f"{entity} ‚û°Ô∏è", callback_data=f"{callback_data}#{next_key}"))
    
    return InlineKeyboardMarkup([
        keyboard,
        additional_buttons if additional_buttons is not None else [],
    ])


def get_refresh_button(callback_data: str) -> 'InlineKeyboardButton':
    return InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=callback_data)



# * TEXT ___________________________________________________________________

schedule_not_found = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ"
schedule_without_data = f"–î–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–Ω–æ–≤–∞ /{CommandNames.SCHEDULE}"
schedule_warning_cache = f"‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–µ–ª–∏ –∫–µ—à–∏—Ä—É—é—Ç—Å—è! –í —Å–ª—É—á–∞–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–Ω–æ–≤–∞ /{CommandNames.WEEK}\n–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è /{CommandNames.TODAY} –∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–æ–π <b>–û–±–Ω–æ–≤–∏—Ç—å</b>"

week_not_found = "–ù–µ–¥–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"


session_error = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Å—Å–∏–∏\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ"


server_error = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ —Å–µ—Ä–≤–µ—Ä—É\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ"



# * TEMPLATES ___________________________________________________________________


# * Base template
#  –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å —Å –º–µ—Ç–æ–¥–∞–º–∏ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
class BaseTemplate:    
    WEEKDAYS = {
        '1': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '2': '–í—Ç–æ—Ä–Ω–∏–∫', '3': '–°—Ä–µ–¥–∞',
        '4': '–ß–µ—Ç–≤–µ—Ä–≥', '5': '–ü—è—Ç–Ω–∏—Ü–∞', '6': '–°—É–±–±–æ—Ç–∞', '7': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    }
    
    
    def get_message(self, *args, **kwargs):
        raise NotImplementedError('–ú–µ—Ç–æ–¥ get_message –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –∫–ª–∞—Å—Å–µ-–Ω–∞—Å–ª–µ–¥–Ω–∏–∫–µ')
    
    
    def schedule_title(self, title: str) -> str:
        return f"<b>üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {title}</b>"
    
    def week_info(self, week_type: str, first_date: str, last_date: str = None) -> str:
        first_date = datetime.datetime.strptime(first_date, "%Y-%m-%d").strftime("%d.%m.%Y")

        if last_date is not None:
            last_date = datetime.datetime.strptime(last_date, "%Y-%m-%d").strftime("%d.%m.%Y")
            return f"<b>| {week_type} | {first_date} - {last_date} |</b>"
        
        return f"<b>| {week_type} | {first_date} |</b>"
    
    def get_weekday_name(self, week_day: str) -> str:
        return self.WEEKDAYS.get(str(week_day), "EMPTY")
    
    def get_short_lesson_type(self, lesson_type: str) -> str:
        lesson_type = lesson_type.replace(' ', '').lower()
        short_lesson_types = {
            '–ª–µ–∫—Ü–∏—è': '–õ–ï–ö',
            '–ø—Ä–∞–∫—Ç–∏–∫–∞': '–ü–†–ê', 
            '–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è': '–õ–ê–ë',
            '—Å–µ–º–∏–Ω–∞—Ä': '–°–ï–ú',
            '—ç–∫–∑–∞–º–µ–Ω': '–≠–ö–ó',
            '–∑–∞—á–µ—Ç': '–ó–ê–ß',
            '–¥–∏—Ñ.–∑–∞—á–µ—Ç': '–î–ó–ê–ß',
            '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è': '–ö–û–ù–°',
        }
        return short_lesson_types.get(lesson_type, lesson_type)
    


# * Default template
class DefaultTemplate(BaseTemplate):
    # üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã 4–ë09 –†–ü–°-31
    # | –ß—ë—Ç–Ω–∞—è | 01.10.2025 |

    # –°—Ä–µ–¥–∞
    # * üïí 09:40 - 11:10  
    # | üìö –û—Å–Ω–æ–≤—ã —Ç–µ–æ—Ä–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    # | üéØ –õ–µ–∫—Ü–∏—è
    # | üë®‚Äçüè´ –¥–æ—Ü., –°–µ—Ä–≥—É—à–∏—á–µ–≤–∞ –ê–Ω–Ω–∞ –ü–∞–≤–ª–æ–≤–Ω–∞
    # | üìç –∫. 4, –∞—É–¥. 2–∞

    # * üïí 11:40 - 13:10  
    # | üìö –û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
    # | üéØ –õ–µ–∫—Ü–∏—è
    # | üë®‚Äçüè´ —Å—Ç.–ø—Ä., –ö–æ–≤—ã—Ä–∑–∏–Ω–∞ –¢–∞—Ç—å—è–Ω–∞ –§–µ–¥–æ—Ä–æ–≤–Ω–∞
    # | üìç –∫. 2, –∞—É–¥. 227/3

    # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: 30.09.2025 15:54:20
    # –ü–æ–ª—É—á–µ–Ω–æ: 19:17:09.294201

    def format_lesson(self, lesson: dict) -> str:
        title = lesson.get('title', '')
        time = lesson.get('time', '')
        teacher = lesson.get('teacher', '')
        lesson_type = lesson.get('type', '')
        location = lesson.get('location', '')
        subgroup = lesson.get('subgroup', ' ') or ' '
        
        # –£–ø—Ä–æ—â–∞–µ–º –ª–æ–∫–∞—Ü–∏—é –¥–ª—è –¥–∏—Å—Ç–∞–Ω—Ç–∞
        if '–î–∏—Å—Ç–∞–Ω—Ç' in location:
            location = '–î–∏—Å—Ç–∞–Ω—Ç'
            
        return (
            f"* üïí <b>{time} {subgroup}</b>\n"
            f"| üìö {title}\n"
            f"| üéØ {lesson_type}\n"
            f"| üë®‚Äçüè´ {teacher}\n"
            f"| üìç {location}\n\n"
        )
        
        
    def get_message(self, data: dict, data_type: str = 'day') -> str:
        message_managers = {
            'day': self.format_schedule_day,
            'weeks': self.format_schedule_weeks
        }
        
        return message_managers[data_type](data)
           
    
    def format_schedule_day(self, data: dict) -> str:
        message = ""
        group = data.get('group', '')
        date = data.get('date', '')
        week_number = data.get('week_number', 0)
        week_day = data.get('week_day', '')
        lessons = data.get('lessons', [])
        
        week_odd_even = "–ù–µ—á—ë—Ç–Ω–∞—è" if week_number % 2 != 0 else "–ß—ë—Ç–Ω–∞—è"
        weekday_name = self.get_weekday_name(week_day)

        message += self.schedule_title(group)
        message += '\n'
        message += self.week_info(week_odd_even, date)
        message += '\n\n'
        message += f"<b>{weekday_name}</b>\n"

        if not lessons:
            message += "‚ùå –ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç\n\n"
        else:
            for lesson in lessons:
                message += self.format_lesson(lesson)

        message += f"<i>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {data.get('last_update', '')}\n"
        message += f"–ü–æ–ª—É—á–µ–Ω–æ: {datetime.datetime.now().time()}</i>"
        
        return message
    
    def format_schedule_weeks(self, data: dict, week_number: int = None) -> str:
        message = ""
        group = data.get('group', '')
        weeks = data.get('data', {})
        
        if not weeks:
            return "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        
        if week_number is None:
            week_number = list(weeks.keys())[0]
        
        week = weeks.get(week_number)
        if not week:
            return "–ù–µ–¥–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        week_odd_even = "–ù–µ—á—ë—Ç–Ω–∞—è" if week['is_odd'] else "–ß—ë—Ç–Ω–∞—è"

        message += self.schedule_title(group)
        message += '\n'
        message += self.week_info(week_odd_even, week.get('date_start'), week.get('date_end'))
        message += '\n\n'

        for day_key in week.get('days', {}):
            lessons = week['days'][day_key]
            weekday_date = self.get_date_by_weekday(week.get('date_start'), int(day_key))
            weekday_name = self.get_weekday_name(day_key)

            message += f"<b>{weekday_name} ({weekday_date})</b>\n"

            if not lessons:
                message += "‚ùå –ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç\n\n"
                continue

            for lesson in lessons:
                message += self.format_lesson(lesson)

        message += self.week_info(week_odd_even, week.get('date_start'), week.get('date_end'))
        message += '\n'
        message += f"<i>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {data.get('last_update', '')}</i>"

        return message
    
    def get_date_by_weekday(self, start_date: str, weekday: int) -> str:
        start = datetime.datetime.strptime(start_date, "%Y-%m-%d")
        target_date = start + datetime.timedelta(days=weekday-1)
        return target_date.strftime("%d.%m.%Y")
    
    
    
    
class TemplateManager:
    TEMPLATES = {
        'default': DefaultTemplate,
        # 'short': ShortTemplate, 
        # 'minimal': MinimalTemplate,
    }
    
    def __init__(self):
        self._instances = {}
        
        
    # @overload
    # def get_template(self, name: Literal['short']) -> ShortTemplate: ...
    
    # @overload
    # def get_template(self, name: Literal['minimal']) -> MinimalTemplate: ...
    
    @overload
    def get_template(self, name: Literal['default']) -> DefaultTemplate: ...
    
    @overload
    def get_template(self) -> DefaultTemplate: ...
    
    def get_template(self, template_name: str = 'default') -> BaseTemplate:
        if template_name not in self.TEMPLATES:
            template_name = 'default'
            
        if template_name not in self._instances:
            self._instances[template_name] = self.TEMPLATES[template_name]()
            
        return self._instances[template_name]
    
    def register_template(self, name: str, template_class):
        if issubclass(template_class, BaseTemplate):
            self.TEMPLATES[name] = template_class
    
    
    
    
    
def schedule_title(title):
    return f"<b>üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {title}</b>"


def week_info(week_type, first_date, last_date=None):
    first_date = datetime.datetime.strptime(first_date, "%Y-%m-%d").strftime("%d.%m.%Y")

    if last_date is not None:
        last_date = datetime.datetime.strptime(last_date, "%Y-%m-%d").strftime("%d.%m.%Y")
        return f"<b>| {week_type} | {first_date} - {last_date} |</b>"
    
    return f"<b>| {week_type} | {first_date} |</b>"


def schedule_content(lesson: dict, style_type:str='default'):
    """
    {
        'title': '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π',
        'time': '17:15 - 18:45',
        'teacher': '–¥–æ—Ü., –ò—Å—Ç—Ä–∞—Ç–æ–≤ –ú–∏—Ö–∞–∏–ª –õ–µ–æ–Ω–∏–¥–æ–≤–∏—á',
        'type': '–õ–µ–∫—Ü–∏—è',
        'location': '–∫. –î–∏—Å—Ç–∞–Ω—Ç, –∞—É–¥. –î–∏—Å—Ç–∞–Ω—Ç',
        'order': 30,
        'subgroup': ' '
    }
    
    –õ–ï–ö ‚Äî –õ–µ–∫—Ü–∏—è
    –ü–†–ê ‚Äî –ü—Ä–∞–∫—Ç–∏–∫–∞
    –õ–ê–ë ‚Äî –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è
    –°–ï–ú ‚Äî –°–µ–º–∏–Ω–∞—Ä
    """
    title = lesson.get('title')
    time = lesson.get('time')
    teacher = lesson.get('teacher')
    location = lesson.get('location') if '–î–∏—Å—Ç–∞–Ω—Ç' not in lesson.get('location') else '–î–∏—Å—Ç–∞–Ω—Ç'
    subgroup = lesson.get('subgroup', " ") or " "  # ??????
    
    lesson_type: str = lesson.get('type')
    short_lesson_type = lesson_type

    short_lesson_types = {
        '–ª–µ–∫—Ü–∏—è': '–õ–ï–ö',
        '–ø—Ä–∞–∫—Ç–∏–∫–∞': '–ü–†–ê',
        '–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è': '–õ–ê–ë',
        '—Å–µ–º–∏–Ω–∞—Ä': '–°–ï–ú',
        '—ç–∫–∑–∞–º–µ–Ω': '–≠–ö–ó',
        '–∑–∞—á–µ—Ç': '–ó–ê–ß',
        '–¥–∏—Ñ.–∑–∞—á–µ—Ç': '–î–ó–ê–ß',
        '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è': '–ö–û–ù–°',
    }
    
    if lesson_type.lower() in short_lesson_types:
        short_lesson_type = short_lesson_types[lesson_type.lower()]
        
    
    
    styles = dict(
        default=(
            f"* üïí <b>{time} {subgroup}</b>\n"
            f"| üìö {title}\n"
            f"| üéØ {lesson_type}\n"
            f"| üë®‚Äçüè´ {teacher}\n"
            f"| üìç {location}\n\n"
        ),
        
        short=(
            f"* üïí <b>{time} {subgroup}</b>\n"
            f"| üìö {title}\n"
            f"| üéØ {lesson_type}\n"
            f"| üë®‚Äçüè´ {teacher}\n"
            f"| üìç {location}\n\n"
        ),
    )
    
    if style_type in styles:
        return styles[style_type]

    return styles['default']

def serialize_schedule_day(data: dict) -> str:
    message = ""

    group: str = data.get('group', '')
    date = data.get('date', '')
    week_number: int = data.get('week_number', 0)
    week_day = data.get('week_day', '')
    lessons: list = data.get('lessons', [])


    week_odd_even = "–ù–µ—á—ë—Ç–Ω–∞—è" if week_number % 2 != 0 else "–ß—ë—Ç–Ω–∞—è"
    weekday_name = WEEKDAYS.get(str(week_day), "EMPTY")

    message += schedule_title(group)
    message += '\n'
    message += week_info(week_odd_even, date)
    message += '\n\n'
    message += f"<b>{weekday_name}</b>\n"


    if not lessons:
        message += "‚ùå –ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç\n\n"
        return message


    for lesson in lessons:
        message += schedule_content(lesson)

    message += f"<i>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {data.get('last_update', '')}\n–ü–æ–ª—É—á–µ–Ω–æ: {datetime.datetime.now().time()}</i>"
    
    return message
    

def serialize_schedule_weeks(data: dict, week_number=None) -> str:
    message = ""

    group: str = data.get('group', '')
    weeks: dict = data.get('data', {})


    if not weeks:
        return schedule_not_found
    
    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é
    if week_number is None:
        week_number = list(weeks.keys())[0]
    
    week: dict = weeks.get(week_number)


    if not week:
        return week_not_found
    
    week_odd_even = "–ù–µ—á—ë—Ç–Ω–∞—è" if week['is_odd'] else "–ß—ë—Ç–Ω–∞—è"

    message += schedule_title(group)
    message += '\n'
    message += week_info(week_odd_even, week.get('date_start'), week.get('date_end'))

    for day_key in week.get('days', {}):
        lessons = week['days'][day_key]

        weekday_date = get_date_by_weekday(week.get('date_start'), int(day_key))
        weekday_name = WEEKDAYS.get(str(day_key), "EMPTY")


        message += f"<b>{weekday_name} ({weekday_date})</b>\n"

        if not lessons:
            message += "‚ùå –ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç\n\n"
            continue

        for lesson in lessons:
            message += schedule_content(lesson)

    message += week_info(week_odd_even, week.get('date_start'), week.get('date_end'))
    message += '\n'
    message += f"<i>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {data.get('last_update', '')}</i>"


    return message
    