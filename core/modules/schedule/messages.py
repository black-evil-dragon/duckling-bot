from telegram import InlineKeyboardButton, InlineKeyboardMarkup

from core.data.weekdays import WEEKDAYS
from core.settings.commands import CommandNames
from core.modules.schedule.formatters import get_date_by_weekday

import logging
import datetime



log = logging.getLogger("duckling")
log.setLevel(logging.DEBUG)



# * KEYBOARDS ___________________________________________________________________
def create_pagination_keyboard(callback_data: str, current_page: int, total_pages: int, entity='—Å—Ç—Ä–∞–Ω–∏—Ü–∞') -> 'InlineKeyboardMarkup':
    """
    –£—Å—Ç–∞—Ä–µ–≤—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    log.warning('[func - create_pagination_keyboard]: This method is deprecated. Use use_paginator instead')

    keyboard = []

    if current_page > 0:
        keyboard.append(InlineKeyboardButton(f"‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è {entity}", callback_data=f"{callback_data}_{current_page-1}"))


    if current_page < total_pages - 1:
        keyboard.append(InlineKeyboardButton(f"–°–ª–µ–¥—É—é—â–∞—è {entity} ‚û°Ô∏è", callback_data=f"{callback_data}_{current_page+1}"))
    
    return InlineKeyboardMarkup([keyboard])


def use_paginator(callback_data: str, prev_key: str = None, next_key: str = None, entity='–°—Ç—Ä–∞–Ω–∏—Ü–∞', additional_buttons: list = None) -> 'InlineKeyboardMarkup':
    """
    –ë–æ–ª–µ–µ —É–ª—É—á—à–µ–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    keyboard = []

    if prev_key is not None:
        keyboard.append(InlineKeyboardButton(f"‚¨ÖÔ∏è {entity}", callback_data=f"{callback_data}_{prev_key}"))
    
    keyboard.append(InlineKeyboardButton("üìç –ú–µ–Ω—é", callback_data="delegate#menu"))

    if next_key is not None:
        keyboard.append(InlineKeyboardButton(f"{entity} ‚û°Ô∏è", callback_data=f"{callback_data}_{next_key}"))
    
    return InlineKeyboardMarkup([
        keyboard,
        additional_buttons if additional_buttons is not None else [],
    ])



# * TEXT ___________________________________________________________________

schedule_not_found = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ"
schedule_without_data = f"–î–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–Ω–æ–≤–∞ /{CommandNames.SCHEDULE}"
schedule_warning_cache = f"‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–µ–ª–∏ –∫–µ—à–∏—Ä—É—é—Ç—Å—è! –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–Ω–æ–≤–∞ /{CommandNames.WEEK}"

week_not_found = "–ù–µ–¥–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"


session_error = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Å—Å–∏–∏\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ"


server_error = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ —Å–µ—Ä–≤–µ—Ä—É\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ"



# * TEMPLATES ___________________________________________________________________
def schedule_title(title):
    return f"<b>üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {title}</b>"


def week_info(week_type, first_date, last_date=None):
    first_date = datetime.datetime.strptime(first_date, "%Y-%m-%d").strftime("%d.%m.%Y")

    if last_date is not None:
        last_date = datetime.datetime.strptime(last_date, "%Y-%m-%d").strftime("%d.%m.%Y")
        return f"<b>| {week_type} | {first_date} - {last_date} |</b>"
    
    return f"<b>| {week_type} | {first_date} |</b>"


def schedule_content(lesson: dict):
    """
    {
        'title': '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π',
        'time': '17:15 - 18:45',
        'teacher': '–¥–æ—Ü., –ò—Å—Ç—Ä–∞—Ç–æ–≤ –ú–∏—Ö–∞–∏–ª –õ–µ–æ–Ω–∏–¥–æ–≤–∏—á',
        'type': '–õ–µ–∫—Ü–∏—è',
        'location': '–∫. –î–∏—Å—Ç–∞–Ω—Ç, –∞—É–¥. –î–∏—Å—Ç–∞–Ω—Ç',
        'order': 30,
        'subgroup': ' '
    }
    """
    title = lesson.get('title')
    time = lesson.get('time')
    teacher = lesson.get('teacher')
    lesson_type = lesson.get('type')
    location = lesson.get('location') if '–î–∏—Å—Ç–∞–Ω—Ç' not in lesson.get('location') else '–î–∏—Å—Ç–∞–Ω—Ç'
    subgroup = lesson.get('subgroup', " ") or " "  # ??????


    return (
        f"* üïí <b>{time} {subgroup}</b>\n"
        f"| üìö {title}\n"
        f"| üéØ {lesson_type}\n"
        f"| üë®‚Äçüè´ {teacher}\n"
        f"| üìç {location}\n\n"
    )

def format_schedule_day(data: dict) -> str:
    message = ""

    group: str = data.get('group', '')
    date = data.get('date', '')
    week_number: int = data.get('week_number', 0)
    week_day = data.get('week_day', '')
    lessons: list = data.get('lessons', [])


    week_odd_even = "–ù–µ—á—ë—Ç–Ω–∞—è" if week_number % 2 != 0 else "–ß—ë—Ç–Ω–∞—è"
    weekday_name = WEEKDAYS.get(str(week_day), "EMPTY")

    message += schedule_title(group)
    message += '\n'
    message += week_info(week_odd_even, date)
    message += '\n\n'
    message += f"<b>{weekday_name}</b>\n"


    if not lessons:
        message += "‚ùå –ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç\n\n"
        return message


    for lesson in lessons:
        message += schedule_content(lesson)

    message += f"<i>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {data.get('last_update', '')}</i>"

    
    return message
    

def format_schedule_weeks(data: dict, week_number=None) -> str:
    message = ""

    group: str = data.get('group', '')
    weeks: dict = data.get('data', {})


    if not weeks:
        return schedule_not_found
    
    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é
    if week_number is None:
        week_number = list(weeks.keys())[0]
    
    week: dict = weeks.get(week_number)


    if not week:
        return week_not_found
    
    week_odd_even = "–ù–µ—á—ë—Ç–Ω–∞—è" if week['is_odd'] else "–ß—ë—Ç–Ω–∞—è"

    message += schedule_title(group)
    message += '\n'
    message += week_info(week_odd_even, week.get('date_start'), week.get('date_end'))

    for day_key in week.get('days', {}):
        lessons = week['days'][day_key]

        weekday_date = get_date_by_weekday(week.get('date_start'), int(day_key))
        weekday_name = WEEKDAYS.get(str(day_key), "EMPTY")


        message += f"<b>{weekday_name} ({weekday_date})</b>\n"

        if not lessons:
            message += "‚ùå –ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç\n\n"
            continue

        for lesson in lessons:
            message += schedule_content(lesson)

    message += week_info(week_odd_even, week.get('date_start'), week.get('date_end'))
    message += '\n'
    message += f"<i>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {data.get('last_update', '')}</i>"

    
    
    return message
    